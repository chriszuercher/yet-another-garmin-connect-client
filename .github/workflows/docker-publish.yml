name: Build and Publish Docker image

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to get all tags for versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get major and minor from csproj
        id: version
        run: |
          version=$(grep -oPm1 '(?<=<Version>)[^<]+' ./src/Api/Api.csproj)
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT

      - name: Get next patch number from git tags
        id: patch
        run: |
          prefix="v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}."
          # List tags matching vMAJOR.MINOR.*
          tags=$(git tag --list "${prefix}*" | sed "s/^${prefix}//" | sort -V)
          if [[ -z "$tags" ]]; then
            patch=0
          else
            last_patch=$(echo "$tags" | tail -n1)
            patch=$((last_patch + 1))
          fi
          echo "patch=$patch" >> $GITHUB_OUTPUT

      - name: Compose full version
        id: full_version
        run: |
          version="${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.patch.outputs.patch }}"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create and push git tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v${{ steps.full_version.outputs.version }}"
          git push origin "v${{ steps.full_version.outputs.version }}"

      - name: Generate release notes
        id: release_notes
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="v${{ steps.full_version.outputs.version }}" \
            > notes.json
          body=$(jq -r '.body' notes.json)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with custom notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.full_version.outputs.version }}
          name: Release v${{ steps.full_version.outputs.version }}
          body: |
            ## Docker Images
      
            [//]: - [Docker Hub](https://hub.docker.com/r/lswiderski/yet-another-garmin-connect-client-api)
            - [GitHub Container Registry](https://ghcr.io/chriszuercher/yet-another-garmin-connect-client-api)
      
            ---
      
            ${{ steps.release_notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: Log in to Docker Hub
      #  uses: docker/login-action@v3
      #  with:
      #    registry: docker.io
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/yet-another-garmin-connect-client-api:${{ steps.full_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/yet-another-garmin-connect-client-api:latest
          #  lswiderski/yet-another-garmin-connect-client-api:${{ steps.full_version.outputs.version }}
          #  lswiderski/yet-another-garmin-connect-client-api:latest
